// Generated by LiveScript 1.4.0
/**
 * User: Roy
 * Date: 2016/5/31
 * Time: 11:07
 */
var mysql, _, exp, createPool;
mysql = require('mysql');
_ = require('lodash');
exp = function(mysqlGaleraHostsArray, user, password, database){
  var self, poolCluster, i$, len$, item, ref$;
  self = this;
  self.poolCluster = poolCluster = mysql.createPoolCluster({
    canRetry: true,
    removeNodeErrorCount: Number.MAX_VALUE,
    restoreNodeTimeout: Number.MAX_VALUE,
    defaultSelector: 'RR'
  });
  console.log("[mysql galera] new poolCluster for DB:", database);
  for (i$ = 0, len$ = mysqlGaleraHostsArray.length; i$ < len$; ++i$) {
    item = mysqlGaleraHostsArray[i$];
    console.log("[mysql galera] poolCluster.add hosts:", item);
    poolCluster.add({
      host: item.host,
      port: (ref$ = item.port) != null ? ref$ : 3306,
      user: user,
      password: password,
      database: database,
      connectTimeout: 1000 * 3,
      acquireTimeout: 1000 * 3,
      waitForConnections: true,
      connectionLimit: item.connectionLimit,
      queueLimit: 300
    });
  }
};
exp.prototype.query = function(sqlString, values, callback){
  var self, inputArgs, i$, len$, item;
  self = this;
  inputArgs = [];
  for (i$ = 0, len$ = arguments.length; i$ < len$; ++i$) {
    item = arguments[i$];
    inputArgs.push(item);
  }
  self.poolCluster.getConnection(function(err, connection){
    var cb;
    cb = inputArgs[inputArgs.length - 1];
    if (_.isFunction(cb)) {
      inputArgs[inputArgs.length - 1] = function(error, results, fields){
        connection.release();
        cb(error, results, fields);
      };
    } else {
      inputArgs[inputArgs.length] = function(error, results, fields){
        connection.release();
      };
    }
    connection.query.apply(connection, inputArgs);
  });
};
createPool = function(mysqlGaleraHostsArray, user, password, database){
  return new exp(mysqlGaleraHostsArray, user, password, database);
};
module.exports.createPool = createPool;